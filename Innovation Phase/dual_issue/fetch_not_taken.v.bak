module fetch_not_taken(
input clk,rst,jr, hold, correct_en,
input [9:0] reg1Addr, correction,
output flush_second,
output [9:0] return_addr1, return_addr2,
output [31:0] instruction_1, instruction_2
);



reg [9:0] nextPC;
wire [5:0] opcode1, opcode2;
wire jump;


assign pc_plus = PC[0] ? PC + 10'b1: PC + 10'd2;
assign flush_second = PC[0];



assign opcode1 = instruction_1[31:26];
assign opcode2 = instruction_2[31:26];
assign adress_1 = instruction_1[9:0];
assign adress_2 = instruction_2[9:0];
assign jump_1 = (opcode_1 == 6'h2 || opcode_1 == 6'h3);
assign jump_2 = (opcode_2 == 6'h2 || opcode_2 == 6'h3);
assign Branch_1 = (opcode1 == 6'h4 || opcode1 == 6'h5);
assign Branch_2 = (opcode2 == 6'h4 || opcode2 == 6'h5);


always @(*) begin
    casez ({rst, correct_en ,jr, Branch_1, jump_1, Branch_2, jump_2})
        7'b0zzzzzz: nextPC = 10'b0000000000;      // Reset condition
        7'b11zzzzz: nextPC = correction;
		  7'b101zzzz: nextPC = reg1Addr;           // Jump register
        7'b10001zz: nextPC = address_1;            // J-type instruction
		  7'b1000001: nextPC = address_2;
        default:         nextPC = PCPlus1;            // Default case
    endcase
end



programCounter pc(.clk(clk), .rst(rst), .PCin(nextPC), .PCout(PC), .hold(hold));

instructionMemory IM(.address_a(PC), .address_a(PC + 10'b1), .clock(~clk), .q_a(instruction_1), .q_b(instruction_2));




endmodule